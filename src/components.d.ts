/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface FramerEmulator {
        /**
          * The name of the device to emulate.
         */
        "deviceName": string;
        /**
          * Don't render the emulator. Useful when the emulator is hidden on load.
         */
        "disabled": boolean;
        /**
          * Focus the iFrame.
         */
        "focusFrame": () => Promise<void>;
        /**
          * Emulate the design of Ionic Framework applications.
         */
        "ionicMode": boolean;
        /**
          * Show the device in landscape mode.
         */
        "landscape": boolean;
        /**
          * The URL to load.
         */
        "url": string;
        /**
          * Whether to calculate the size based on height instead of width. Requires a defined height.
         */
        "useHeight": boolean;
    }
    interface FramerFrame {
        /**
          * Don't render the frame. Useful when the frame is hidden on load.
         */
        "disabled": boolean;
        /**
          * The emulated height.
         */
        "fheight": number;
        /**
          * Focus the iFrame.
         */
        "focusFrame": () => Promise<void>;
        /**
          * The emulated width.
         */
        "fwidth": number;
        /**
          * Get the iFrame element.
         */
        "getFrame": () => Promise<HTMLIFrameElement>;
        /**
          * The URL to load.
         */
        "url": string;
        /**
          * Whether to calculate the size based on height instead of width. Requires you to define a height using CSS.
         */
        "useHeight": boolean;
    }
}
declare global {
    interface HTMLFramerEmulatorElement extends Components.FramerEmulator, HTMLStencilElement {
    }
    var HTMLFramerEmulatorElement: {
        prototype: HTMLFramerEmulatorElement;
        new (): HTMLFramerEmulatorElement;
    };
    interface HTMLFramerFrameElement extends Components.FramerFrame, HTMLStencilElement {
    }
    var HTMLFramerFrameElement: {
        prototype: HTMLFramerFrameElement;
        new (): HTMLFramerFrameElement;
    };
    interface HTMLElementTagNameMap {
        "framer-emulator": HTMLFramerEmulatorElement;
        "framer-frame": HTMLFramerFrameElement;
    }
}
declare namespace LocalJSX {
    interface FramerEmulator {
        /**
          * The name of the device to emulate.
         */
        "deviceName"?: string;
        /**
          * Don't render the emulator. Useful when the emulator is hidden on load.
         */
        "disabled"?: boolean;
        /**
          * Emulate the design of Ionic Framework applications.
         */
        "ionicMode"?: boolean;
        /**
          * Show the device in landscape mode.
         */
        "landscape"?: boolean;
        /**
          * The URL to load.
         */
        "url"?: string;
        /**
          * Whether to calculate the size based on height instead of width. Requires a defined height.
         */
        "useHeight"?: boolean;
    }
    interface FramerFrame {
        /**
          * Don't render the frame. Useful when the frame is hidden on load.
         */
        "disabled"?: boolean;
        /**
          * The emulated height.
         */
        "fheight"?: number;
        /**
          * The emulated width.
         */
        "fwidth"?: number;
        /**
          * Fires when the frame has initially loaded.
         */
        "onFrameLoaded"?: (event: CustomEvent<void>) => void;
        /**
          * The URL to load.
         */
        "url"?: string;
        /**
          * Whether to calculate the size based on height instead of width. Requires you to define a height using CSS.
         */
        "useHeight"?: boolean;
    }
    interface IntrinsicElements {
        "framer-emulator": FramerEmulator;
        "framer-frame": FramerFrame;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "framer-emulator": LocalJSX.FramerEmulator & JSXBase.HTMLAttributes<HTMLFramerEmulatorElement>;
            "framer-frame": LocalJSX.FramerFrame & JSXBase.HTMLAttributes<HTMLFramerFrameElement>;
        }
    }
}
